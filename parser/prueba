-----------------------------------------------------------------------------
Info file generated by Happy Version 1.18.6 from src/Parser.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parser -> negativo                          (0)
	negativo -> '-' Suma                               (1)
	Suma -> '(' Suma ')'                               (2)
	Suma -> Suma '+' Suma                              (3)
	Suma -> Suma '-' Suma                              (4)
	Suma -> num                                        (5)
	Suma -> '(' '-' Suma ')'                           (6)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	num            { TkNum  _ $$ }
	'+'            { TkPlus _ }
	'-'            { TkMinus _ }
	'('            { TkLBkt _ }
	')'            { TkRBkt _ }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parser   rule  0
	negativo        rule  1
	Suma            rules 2, 3, 4, 5, 6

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	'-'            shift, and enter state 2

	negativo       goto state 3

State 1


	'-'            shift, and enter state 2


State 2

	negativo -> '-' . Suma                              (rule 1)

	num            shift, and enter state 5
	'('            shift, and enter state 6

	Suma           goto state 4

State 3

	%start_parser -> negativo .                         (rule 0)

	%eof           accept


State 4

	negativo -> '-' Suma .                              (rule 1)
	Suma -> Suma . '+' Suma                             (rule 3)
	Suma -> Suma . '-' Suma                             (rule 4)

	'+'            shift, and enter state 9
	'-'            shift, and enter state 10
	%eof           reduce using rule 1


State 5

	Suma -> num .                                       (rule 5)

	'+'            reduce using rule 5
	'-'            reduce using rule 5
	')'            reduce using rule 5
	%eof           reduce using rule 5


State 6

	Suma -> '(' . Suma ')'                              (rule 2)
	Suma -> '(' . '-' Suma ')'                          (rule 6)

	num            shift, and enter state 5
	'-'            shift, and enter state 8
	'('            shift, and enter state 6

	Suma           goto state 7

State 7

	Suma -> '(' Suma . ')'                              (rule 2)
	Suma -> Suma . '+' Suma                             (rule 3)
	Suma -> Suma . '-' Suma                             (rule 4)

	'+'            shift, and enter state 9
	'-'            shift, and enter state 10
	')'            shift, and enter state 14


State 8

	Suma -> '(' '-' . Suma ')'                          (rule 6)

	num            shift, and enter state 5
	'('            shift, and enter state 6

	Suma           goto state 13

State 9

	Suma -> Suma '+' . Suma                             (rule 3)

	num            shift, and enter state 5
	'('            shift, and enter state 6

	Suma           goto state 12

State 10

	Suma -> Suma '-' . Suma                             (rule 4)

	num            shift, and enter state 5
	'('            shift, and enter state 6

	Suma           goto state 11

State 11

	Suma -> Suma . '+' Suma                             (rule 3)
	Suma -> Suma . '-' Suma                             (rule 4)
	Suma -> Suma '-' Suma .                             (rule 4)

	'+'            reduce using rule 4
	'-'            reduce using rule 4
	')'            reduce using rule 4
	%eof           reduce using rule 4


State 12

	Suma -> Suma . '+' Suma                             (rule 3)
	Suma -> Suma '+' Suma .                             (rule 3)
	Suma -> Suma . '-' Suma                             (rule 4)

	'+'            reduce using rule 3
	'-'            reduce using rule 3
	')'            reduce using rule 3
	%eof           reduce using rule 3


State 13

	Suma -> Suma . '+' Suma                             (rule 3)
	Suma -> Suma . '-' Suma                             (rule 4)
	Suma -> '(' '-' Suma . ')'                          (rule 6)

	'+'            shift, and enter state 9
	'-'            shift, and enter state 10
	')'            shift, and enter state 15


State 14

	Suma -> '(' Suma ')' .                              (rule 2)

	'+'            reduce using rule 2
	'-'            reduce using rule 2
	')'            reduce using rule 2
	%eof           reduce using rule 2


State 15

	Suma -> '(' '-' Suma ')' .                          (rule 6)

	'+'            reduce using rule 6
	'-'            reduce using rule 6
	')'            reduce using rule 6
	%eof           reduce using rule 6


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 7
Number of terminals: 5
Number of non-terminals: 3
Number of states: 16
